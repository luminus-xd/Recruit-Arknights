# コメントスタイルガイド

## 基本方針

コードのコメントは、複雑なロジックや特殊なケースの説明に焦点を当て、冗長な説明や開発者向けの変更通知は避けます。コメントは「何をするか」ではなく「なぜそうするか」を説明することを目指します。

## コメントルール

### 削除すべきコメント

1. **開発者向けの変更通知コメント**
   ```typescript
   // 最適化された関数
   // パフォーマンスを改善
   // コードの効率化
   // 処理を最適化
   ```

2. **単純な処理を説明する冗長なコメント**
   ```typescript
   // 変数を初期化
   // 結果を返す
   // オブジェクトを作成
   ```

3. **実装詳細を含むコンポーネント説明**
   ```typescript
   // メモ化されたチェックボックスコンポーネント
   // 最適化されたフィルタリング結果コンポーネント
   ```

4. **実装詳細を含む関数説明**
   ```typescript
   /**
    * 最適化されたファジーマッチング関数
    */
   // 並列処理で高速化された関数
   ```

### 保持すべきコメント

1. **定数の説明**
   ```typescript
   const MAX_IMAGE_SIZE = 1024 * 1024; // 1MB
   const TIMEOUT = 30000; // 30秒タイムアウト
   ```

2. **複雑なロジックの説明**
   ```typescript
   // Levenshtein距離による判定
   const distance = levenshtein.get(target.toLowerCase(), keyword.toLowerCase());
   const threshold = Math.floor(keyword.length * FUZZY_THRESHOLD_RATIO);
   return distance <= threshold;
   ```

3. **特殊なケースの処理説明**
   ```typescript
   // 職業タイプの特別処理（「先鋒タイプ」→「先鋒」など）
   const typeKeywords = ['先鋒', '前衛', '狙撃', '術師', '重装', '医療', '補助', '特殊'];
   if (typeKeywords.includes(keyword)) {
     // 「先鋒タイプ」のようなパターンをチェック
     const typeRegex = new RegExp(`${keyword}(タイプ|職業|クラス)?`, 'i');
     if (typeRegex.test(target)) return true;
   }
   ```

4. **設定値の説明**
   ```typescript
   // Next.js 13以降のキャッシュ戦略
   // 1時間ごとに再検証
   ```

5. **JSDocコメント（ただし実装詳細は削除）**
   ```typescript
   /**
    * ファジーマッチング関数
    * @param target OCR 結果の行
    * @param keyword 比較対象のタグ
    */
   ```

## 修正例

### 修正前

```typescript
// メモ化されたチェックボックスコンポーネント
const MemoizedCheckbox = memo(Checkbox);

/**
 * 最適化されたファジーマッチング関数
 * @param target OCR 結果の行
 * @param keyword 比較対象のタグ
 */
```

### 修正後

```typescript
// チェックボックスコンポーネント
const MemoizedCheckbox = memo(Checkbox);

/**
 * ファジーマッチング関数
 * @param target OCR 結果の行
 * @param keyword 比較対象のタグ
 */
```

## 適用範囲

このコメントスタイルガイドは、以下のファイルタイプに適用されます：

- TypeScriptファイル（.ts, .tsx）
- JavaScriptファイル（.js, .jsx）
- 設定ファイル（.config.js, .config.ts）

## 目的

このガイドラインの目的は以下の通りです：

1. コードの可読性向上
2. 重要なコメントの視認性向上
3. 冗長なコメントの削減によるコードの簡潔化
4. 開発者間での一貫したコメントスタイルの確立

## 例外

特に複雑なアルゴリズムや、チームの新メンバーが理解しにくい可能性のあるコードについては、より詳細なコメントを許容します。ただし、その場合でも実装詳細よりもロジックの「なぜ」に焦点を当てるべきです。